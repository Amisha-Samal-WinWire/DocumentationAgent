{
  "create_sample_database": {
    "documentation": "```markdown\n# create_sample_database\n\n## Description\nThe `create_sample_database` function generates a sample SQLite database populated with housing data. It first creates a CSV file containing sample data, then establishes a SQLite database and populates it with the data from the CSV file. This function is useful for testing and development purposes, providing a quick way to set up a database with predefined data.\n\n## Parameters/Attributes\nNone\n\n## Returns\nNone\n\n## Example Usage\n```python\ncreate_sample_database()\n```\nThis will create a sample SQLite database and populate it with housing data.\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "create_sample_database",
          "label": "Sample Database Creator",
          "type": "Business Logic",
          "description": "Generates a sample SQLite database populated with predefined housing data for testing and development."
        },
        {
          "id": "CSV_FILE",
          "label": "Sample CSV File",
          "type": "Data Model",
          "description": "Contains sample housing data used to populate the SQLite database."
        },
        {
          "id": "SQLite_DATABASE",
          "label": "SQLite Database",
          "type": "Data Model",
          "description": "A database that stores the housing data in a structured format."
        },
        {
          "id": "TABLE_NAME",
          "label": "Housing Data Table",
          "type": "Data Model",
          "description": "Table within the SQLite database that holds the housing data."
        }
      ],
      "edges": [
        {
          "source": "create_sample_database",
          "target": "CSV_FILE",
          "label": "GENERATES"
        },
        {
          "source": "create_sample_database",
          "target": "SQLite_DATABASE",
          "label": "CREATES"
        },
        {
          "source": "create_sample_database",
          "target": "TABLE_NAME",
          "label": "POPULATES"
        },
        {
          "source": "CSV_FILE",
          "target": "TABLE_NAME",
          "label": "PROVIDES_DATA_FOR"
        },
        {
          "source": "SQLite_DATABASE",
          "target": "TABLE_NAME",
          "label": "CONTAINS"
        }
      ]
    }
  },
  "Settings": {
    "documentation": "```markdown\n# Settings Class Documentation\n\n## Description\nThe `Settings` class is responsible for managing application settings, which are loaded from environment variables. It extends the `BaseSettings` class, providing a structured way to access configuration values necessary for the operation of the application.\n\n## Parameters/Attributes\n- `APP_NAME` (str): The name of the application, defaulting to 'Scientific Calculator API'.\n- `API_V1_STR` (str): The base URL path for version 1 of the API, defaulting to '/api/v1'.\n\n### Config Class\n- `Config`: A nested class that specifies configuration options for the `Settings` class.\n  - `env_file` (str): The name of the environment file from which to load the settings, defaulting to '.env'.\n\n## Returns\nNone\n\n## Example Usage\n```python\nfrom app.core.config import Settings\n\nsettings = Settings()\nprint(settings.APP_NAME)  # Output: Scientific Calculator API\nprint(settings.API_V1_STR)  # Output: /api/v1\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "Settings",
          "label": "Application Settings Manager",
          "type": "Configuration",
          "description": "Manages application settings loaded from environment variables."
        },
        {
          "id": "BaseSettings",
          "label": "Base Settings Class",
          "type": "Configuration",
          "description": "Provides a foundational structure for managing application settings."
        }
      ],
      "edges": [
        {
          "source": "Settings",
          "target": "BaseSettings",
          "label": "INHERITS_FROM"
        }
      ]
    }
  },
  "Config": {
    "documentation": "```markdown\n# Config Class Documentation\n\n## Description\nThe `Config` class is responsible for managing configuration settings within the application. It defines the location of the environment file used for loading environment variables.\n\n## Parameters/Attributes\n- `env_file` (str): The name of the environment file. Default is `'.env'`.\n\n## Returns\nNone\n\n## Example Usage\n```python\nconfig = Config()\nprint(config.env_file)  # Output: .env\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "Config",
          "label": "Configuration Manager",
          "type": "Configuration",
          "description": "Manages configuration settings and defines the location of the environment file for loading variables."
        }
      ],
      "edges": []
    }
  },
  "APIException.__init__": {
    "documentation": "```markdown\n### Description\nInitializes an instance of the `APIException` class, which represents an error response from an API. This exception includes a status code and a detailed message to provide context about the error.\n\n### Parameters\n- `status_code` (int): The HTTP status code associated with the error.\n- `detail` (str): A detailed message describing the error.\n\n### Returns\nNone\n\n### Example Usage\n```python\nraise APIException(status_code=404, detail=\"Resource not found.\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "APIException.__init__",
          "label": "API Exception Initializer",
          "type": "Business Logic",
          "description": "Initializes an instance of the APIException class to represent an error response from an API."
        }
      ],
      "edges": []
    }
  },
  "CalculationError.__init__": {
    "documentation": "```markdown\n### Description\nInitializes a `CalculationError` exception with a specified detail message. This exception is intended to signal errors that occur during calculations, providing a clear indication of the issue encountered.\n\n### Parameters\n- `detail` (str, optional): A descriptive message detailing the calculation error. Defaults to 'A calculation error occurred.'.\n\n### Returns\nNone\n\n### Example Usage\n```python\nraise CalculationError(\"Division by zero encountered.\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "CalculationError.__init__",
          "label": "Calculation Error Initializer",
          "type": "Business Logic",
          "description": "Initializes a CalculationError exception to signal errors during calculations."
        }
      ],
      "edges": []
    }
  },
  "DataError.__init__": {
    "documentation": "```markdown\n### Description\nInitializes a `DataError` exception with a specified detail message. This exception is intended to be raised when there is an error related to data processing, providing a clear indication of the issue.\n\n### Parameters\n- `detail` (str, optional): A message providing details about the error. Defaults to 'An error occurred while processing data.'.\n\n### Returns\nNone\n\n### Example Usage\n```python\nraise DataError(\"Invalid data format provided.\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "DataError.__init__",
          "label": "DataError Initialization",
          "type": "Business Logic",
          "description": "Initializes a DataError exception to indicate issues in data processing."
        }
      ],
      "edges": []
    }
  },
  "SingleInput": {
    "documentation": "```markdown\n# SingleInput Class Documentation\n\n## Description\nThe `SingleInput` class is a model designed for operations that require a single numerical input. It encapsulates a floating-point number, which can be utilized in various mathematical computations or transformations.\n\n## Parameters/Attributes\n- `number` (float): A floating-point number representing the single input value for operations.\n\n## Returns\nNone\n\n## Example Usage\n```python\nsingle_input = SingleInput(number=42.0)\nprint(single_input.number)  # Output: 42.0\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "SingleInput",
          "label": "Single Input Model",
          "type": "Data Model",
          "description": "Encapsulates a single floating-point number for mathematical operations."
        }
      ],
      "edges": []
    }
  },
  "DualInput": {
    "documentation": "```markdown\n# DualInput Class Documentation\n\n## Description\nThe `DualInput` class is a model designed to represent operations that require two numerical inputs. It serves as a foundational component for calculations that involve two distinct numbers, facilitating the management and validation of these inputs.\n\n## Parameters/Attributes\n- `number1` (float): The first numerical input for the operation.\n- `number2` (float): The second numerical input for the operation.\n\n## Returns\nNone\n\n## Example Usage\n```python\n# Creating an instance of DualInput with two numbers\ninput_data = DualInput(number1=5.0, number2=10.0)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "DualInput",
          "label": "Dual Input Model",
          "type": "Data Model",
          "description": "Represents operations that require two numerical inputs for calculations."
        }
      ],
      "edges": []
    }
  },
  "ListInput": {
    "documentation": "```markdown\n# ListInput Class\n\n## Description\nThe `ListInput` class is a model designed for operations on a list of numbers. It ensures that the input data consists of a list of floating-point numbers with a minimum length of one.\n\n## Parameters/Attributes\n- `data` (List[float]): A list of floating-point numbers. This attribute is required and must contain at least one element.\n\n## Returns\nNone\n\n## Example Usage\n```python\nfrom app.models.calculator import ListInput\n\n# Creating an instance of ListInput with valid data\nlist_input = ListInput(data=[1.0, 2.5, 3.3])\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "ListInput",
          "label": "List Input Model",
          "type": "Data Model",
          "description": "Represents a model for operations on a list of floating-point numbers."
        }
      ],
      "edges": []
    }
  },
  "TTestInput.samples_must_not_be_identical": {
    "documentation": "```markdown\n### Description\nThe `samples_must_not_be_identical` method is a class-level validator that ensures the values of `sample1` and `sample2` are not identical when performing a t-test. If both samples are found to be the same, a `ValueError` is raised, preventing invalid statistical analysis.\n\n### Parameters\n- **cls** (`Type[TypeVar]`): The class itself, used for class-level validation.\n- **v** (`Any`): The value of `sample2` being validated.\n- **values** (`Dict[str, Any]`): A dictionary containing the values of other fields, including `sample1`.\n\n### Returns\n- **v** (`Any`): The validated value of `sample2` if it is not identical to `sample1`.\n\n### Example Usage\n```python\nfrom app.models.calculator import TTestInput\n\ntry:\n    t_test_input = TTestInput(sample1=[1, 2, 3], sample2=[1, 2, 3])\nexcept ValueError as e:\n    print(e)  # Output: Sample 1 and Sample 2 cannot be identical for a t-test.\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "TTestInput.samples_must_not_be_identical",
          "label": "Sample Identity Validator",
          "type": "Business Logic",
          "description": "Validates that two samples are not identical for statistical analysis in a t-test."
        }
      ],
      "edges": []
    }
  },
  "RegressionInput.dependent_var_not_in_independent": {
    "documentation": "```markdown\n### Description\nThe `dependent_var_not_in_independent` method is a class-level validator that ensures the dependent variable is not included in the list of independent variables. If the dependent variable is found among the independent variables, a `ValueError` is raised, enforcing the integrity of the regression model's variable definitions.\n\n### Parameters\n- `cls` (Type: `Type[RegressionInput]`): The class itself, used for class-level validation.\n- `v` (Type: `list`): The list of independent variables being validated.\n- `values` (Type: `dict`): A dictionary containing the current values of the model's fields, including the dependent variable.\n\n### Returns\n- Type: `list`\n- The validated list of independent variables.\n\n### Example Usage\n```python\n# Assuming 'RegressionInput' is a defined class with 'dependent_var' and 'independent_vars' fields\ntry:\n    RegressionInput.dependent_var_not_in_independent(['dependent_var', 'independent_var1'], {'data': {'dependent_var': 'dependent_var'}})\nexcept ValueError as e:\n    print(e)  # Output: The dependent variable 'dependent_var' cannot also be an independent variable.\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "RegressionInput.dependent_var_not_in_independent",
          "label": "Dependent Variable Validator",
          "type": "Business Logic",
          "description": "Validates that the dependent variable is not included in the list of independent variables."
        }
      ],
      "edges": []
    }
  },
  "CorrelationInput.check_min_columns": {
    "documentation": "```markdown\n### Description\nThe `check_min_columns` method is a class method that validates the number of columns specified for a correlation matrix. It ensures that at least two columns are provided, raising a `ValueError` if this condition is not met. This validation is crucial for maintaining the integrity of correlation calculations.\n\n### Parameters\n- `cls` (type: `Type[CorrelationInput]`): The class itself, used for class method context.\n- `v` (type: `Optional[List[Any]]`): The value representing the columns to be validated. It can be `None` or a list of columns.\n\n### Returns\n- (type: `Optional[List[Any]]`): Returns the input value `v` if it meets the validation criteria. If `v` is `None` or contains two or more columns, it is returned unchanged.\n\n### Example Usage\n```python\nclass CorrelationInput:\n    @field_validator('columns')\n    @classmethod\n    def check_min_columns(cls, v):\n        if v is not None and len(v) < 2:\n            raise ValueError('At least two columns must be specified for a correlation matrix.')\n        return v\n\n# Example of validation\ntry:\n    CorrelationInput.check_min_columns(['column1'])  # This will raise a ValueError\nexcept ValueError as e:\n    print(e)  # Output: At least two columns must be specified for a correlation matrix.\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "CorrelationInput.check_min_columns",
          "label": "Minimum Columns Validator",
          "type": "Business Logic",
          "description": "Validates that at least two columns are specified for a correlation matrix."
        }
      ],
      "edges": []
    }
  },
  "MatrixInput.matrix_must_be_square": {
    "documentation": "```markdown\n### Description\nThe `matrix_must_be_square` method is a class-level validator that ensures the provided matrix is square, meaning it has the same number of rows and columns. This validation is crucial for mathematical operations that require square matrices, such as certain linear algebra computations.\n\n### Parameters\n- `cls` (type: `Type[MatrixInput]`): The class itself, used for class-level method context.\n- `v` (type: `List[List[float]]`): A list of lists representing the matrix to be validated.\n\n### Returns\n- `List[List[float]]`: The validated matrix if it is square.\n\n### Raises\n- `ValueError`: If the matrix is empty or if it is not square (i.e., the number of rows does not equal the number of columns).\n\n### Example Usage\n```python\nmatrix = [[1, 2], [3, 4]]\nvalidated_matrix = MatrixInput.matrix_must_be_square(matrix)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "MatrixInput.matrix_must_be_square",
          "label": "Matrix Square Validator",
          "type": "Business Logic",
          "description": "Validates that a given matrix is square, ensuring it has the same number of rows and columns."
        }
      ],
      "edges": []
    }
  },
  "MatrixInput.to_numpy_array": {
    "documentation": "```markdown\n### Description\nConverts the internal matrix representation of the `MatrixInput` instance into a NumPy array. This method facilitates numerical operations on the matrix by leveraging the capabilities of the NumPy library.\n\n### Parameters/Attributes\nNone\n\n### Returns\n`np.ndarray`: A NumPy array representation of the internal matrix.\n\n### Example Usage\n```python\nmatrix_input = MatrixInput([[1, 2], [3, 4]])\nnumpy_array = matrix_input.to_numpy_array()\nprint(numpy_array)  # Output: [[1 2]\n                     #          [3 4]]\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "MatrixInput.to_numpy_array",
          "label": "Matrix to NumPy Array Converter",
          "type": "Utility",
          "description": "Converts the internal matrix representation of a MatrixInput instance into a NumPy array for numerical operations."
        }
      ],
      "edges": []
    }
  },
  "FutureValueInput.cash_outflow_must_be_negative": {
    "documentation": "```markdown\n### Description\nThe `cash_outflow_must_be_negative` method is a class-level validator that ensures the values for cash outflow parameters (`pmt` and `pv`) are zero or negative. This validation helps maintain the integrity of financial calculations by enforcing that cash outflows cannot be represented as positive values.\n\n### Parameters\n- `cls` (Type: `Type[FutureValueInput]`): The class itself, passed automatically by the class method.\n- `v` (Type: `float`): The value to be validated, representing a cash outflow.\n- `info` (Type: `FieldInfo`): Metadata about the field being validated, including its name.\n\n### Returns\n- (Type: `float`): The validated value `v`, which is returned unchanged if it is zero or negative.\n\n### Raises\n- `ValueError`: If the value `v` is greater than zero, indicating an invalid cash outflow.\n\n### Example Usage\n```python\nfrom app.models.calculator import FutureValueInput\n\n# This will raise a ValueError\nFutureValueInput.cash_outflow_must_be_negative(100)\n\n# This will pass validation\nFutureValueInput.cash_outflow_must_be_negative(-50)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "FutureValueInput.cash_outflow_must_be_negative",
          "label": "Cash Outflow Validator",
          "type": "Business Logic",
          "description": "Validates that cash outflow parameters are zero or negative to ensure financial integrity."
        }
      ],
      "edges": []
    }
  },
  "LoanPaymentInput": {
    "documentation": "```markdown\n# LoanPaymentInput Class Documentation\n\n## Description\nThe `LoanPaymentInput` class is a model used for calculating loan payments. It encapsulates the essential parameters required for loan payment calculations, ensuring that the values provided adhere to specific constraints.\n\n## Parameters/Attributes\n- `rate` (float): The interest rate per period. Must be greater than 0.\n- `nper` (int): The total number of payment periods. Must be greater than 0.\n- `pv` (float): The present value or principal of the loan. Must be a positive value.\n\n## Returns\nNone\n\n## Example Usage\n```python\nfrom app.models.calculator import LoanPaymentInput\n\nloan_input = LoanPaymentInput(rate=5.0, nper=60, pv=30000)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "LoanPaymentInput",
          "label": "Loan Payment Input Model",
          "type": "Data Model",
          "description": "Encapsulates parameters for calculating loan payments with specific constraints."
        }
      ],
      "edges": []
    }
  },
  "StdDevInput": {
    "documentation": "```markdown\n# StdDevInput Class Documentation\n\n## Description\nThe `StdDevInput` class is a model designed for the calculation of the standard deviation. It serves as a data structure to hold a list of numerical values for which the standard deviation will be computed.\n\n## Parameters/Attributes\n- `data` (List[float]): A list of floating-point numbers representing the dataset for which the standard deviation is to be calculated.\n\n## Returns\nNone\n\n## Example Usage\n```python\nfrom app.models.calculator import StdDevInput\n\n# Create an instance of StdDevInput with a sample dataset\nstd_dev_input = StdDevInput(data=[10.0, 12.5, 8.0, 15.5])\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "StdDevInput",
          "label": "Standard Deviation Input Model",
          "type": "Data Model",
          "description": "Holds a list of numerical values for the calculation of standard deviation."
        }
      ],
      "edges": []
    }
  },
  "DescriptiveStatsInput": {
    "documentation": "```markdown\n# DescriptiveStatsInput\n\n## Description\nThe `DescriptiveStatsInput` class serves as a model for input data used in the calculation of descriptive statistics. It inherits from `BaseModel` and is designed to encapsulate a list of numerical values for statistical analysis.\n\n## Parameters/Attributes\n- `data` (List[float]): A list of floating-point numbers representing the dataset for which descriptive statistics will be calculated.\n\n## Returns\nNone\n\n## Example Usage\n```python\nfrom app.models.calculator import DescriptiveStatsInput\n\n# Creating an instance of DescriptiveStatsInput with sample data\nstats_input = DescriptiveStatsInput(data=[1.0, 2.5, 3.3, 4.8, 5.0])\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "DescriptiveStatsInput",
          "label": "Descriptive Statistics Input Model",
          "type": "Data Model",
          "description": "Encapsulates a list of numerical values for the calculation of descriptive statistics."
        },
        {
          "id": "BaseModel",
          "label": "Base Model",
          "type": "Data Model",
          "description": "Serves as a foundational class for data models, providing common functionality."
        }
      ],
      "edges": [
        {
          "source": "DescriptiveStatsInput",
          "target": "BaseModel",
          "label": "INHERITS_FROM"
        }
      ]
    }
  },
  "ZScoreInput": {
    "documentation": "```markdown\n# ZScoreInput Class\n\n## Description\nThe `ZScoreInput` class is a model designed for the calculation of Z-Scores. It inherits from `BaseModel` and encapsulates the input data required for performing Z-Score calculations.\n\n## Parameters/Attributes\n- `data` (List[float]): A list of floating-point numbers representing the dataset for which the Z-Score will be calculated.\n\n## Returns\nNone\n\n## Example Usage\n```python\nz_score_input = ZScoreInput(data=[10.0, 20.0, 30.0])\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "ZScoreInput",
          "label": "Z-Score Input Model",
          "type": "Data Model",
          "description": "Encapsulates the input data required for performing Z-Score calculations."
        },
        {
          "id": "BaseModel",
          "label": "Base Model",
          "type": "Data Model",
          "description": "Serves as a foundational class for data models."
        }
      ],
      "edges": [
        {
          "source": "ZScoreInput",
          "target": "BaseModel",
          "label": "INHERITS_FROM"
        }
      ]
    }
  },
  "ConfidenceIntervalInput": {
    "documentation": "```markdown\n# ConfidenceIntervalInput\n\n## Description\nThe `ConfidenceIntervalInput` class is a model used for calculating confidence intervals. It encapsulates the necessary input data and the confidence level for the calculation, providing a structured way to manage these parameters.\n\n## Parameters/Attributes\n- `data` (List[float]): A list of numerical values for which the confidence interval is to be calculated.\n- `confidence` (float, optional): The confidence level for the interval calculation, defaulting to 0.95 (95%).\n\n## Returns\nNone\n\n## Example Usage\n```python\nfrom app.models.calculator import ConfidenceIntervalInput\n\n# Create an instance of ConfidenceIntervalInput\nci_input = ConfidenceIntervalInput(data=[1.0, 2.0, 3.0, 4.0, 5.0], confidence=0.95)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "ConfidenceIntervalInput",
          "label": "Confidence Interval Input Model",
          "type": "Data Model",
          "description": "Encapsulates input data and confidence level for calculating confidence intervals."
        }
      ],
      "edges": []
    }
  },
  "FinancialService.calculate_future_value": {
    "documentation": "```markdown\n### Description\nCalculates the future value of an investment based on a specified interest rate, number of periods, payment amount, and present value. This method utilizes the financial functions from the NumPy library to perform the calculation.\n\n### Parameters\n- `rate` (float): The interest rate per period.\n- `nper` (int): The total number of payment periods in the investment.\n- `pmt` (float): The payment made each period; it cannot change over the life of the investment.\n- `pv` (float): The present value, or the total amount that a series of future payments is worth now.\n\n### Returns\n- (float): The future value of the investment after the specified number of periods.\n\n### Example Usage\n```python\nfuture_value = financial_service.calculate_future_value(rate=0.05, nper=10, pmt=100, pv=1000)\nprint(f\"The future value of the investment is: {future_value}\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "FinancialService.calculate_future_value",
          "label": "Future Value Calculator",
          "type": "Business Logic",
          "description": "Calculates the future value of an investment based on interest rate, payment amount, present value, and number of periods."
        },
        {
          "id": "NumPyFinancialFunctions",
          "label": "NumPy Financial Functions",
          "type": "Utility",
          "description": "Provides financial calculation functions, including future value calculations."
        }
      ],
      "edges": [
        {
          "source": "FinancialService.calculate_future_value",
          "target": "NumPyFinancialFunctions",
          "label": "USES"
        }
      ]
    }
  },
  "FinancialService.calculate_present_value": {
    "documentation": "```markdown\n### Description\nCalculates the present value of an investment based on the specified interest rate, number of periods, payment amount, and future value. This method is useful for financial analysis and investment decision-making.\n\n### Parameters\n- `rate` (float): The interest rate per period.\n- `nper` (int): The total number of payment periods.\n- `pmt` (float): The payment made each period; it cannot change over the life of the investment.\n- `fv` (float): The future value, or a cash balance you want to attain after the last payment is made.\n\n### Returns\n- (float): The present value of the investment calculated using the provided parameters.\n\n### Example Usage\n```python\nfinancial_service = FinancialService()\npresent_value = financial_service.calculate_present_value(rate=0.05, nper=10, pmt=-100, fv=1000)\nprint(present_value)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "FinancialService.calculate_present_value",
          "label": "Present Value Calculator",
          "type": "Business Logic",
          "description": "Calculates the present value of an investment based on interest rate, payment periods, payment amount, and future value."
        },
        {
          "id": "npf.pv",
          "label": "Net Present Value Function",
          "type": "Utility",
          "description": "A utility function that computes the present value based on financial parameters."
        }
      ],
      "edges": [
        {
          "source": "FinancialService.calculate_present_value",
          "target": "npf.pv",
          "label": "USES"
        }
      ]
    }
  },
  "FinancialService.calculate_payment": {
    "documentation": "```markdown\n### Description\nCalculates the periodic payment required for a loan based on the interest rate, number of payment periods, and present value of the loan. This method utilizes the financial functions provided by the `numpy_financial` library to compute the payment amount.\n\n### Parameters\n- `rate` (float): The interest rate for each period of the loan.\n- `nper` (int): The total number of payment periods for the loan.\n- `pv` (float): The present value or principal amount of the loan.\n\n### Returns\n- (float): The calculated periodic payment amount for the loan.\n\n### Example Usage\n```python\npayment = financial_service.calculate_payment(rate=0.05, nper=60, pv=10000)\nprint(payment)  # Outputs the periodic payment amount\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "FinancialService.calculate_payment",
          "label": "Loan Payment Calculator",
          "type": "Business Logic",
          "description": "Calculates the periodic payment required for a loan based on interest rate, number of periods, and present value."
        },
        {
          "id": "numpy_financial",
          "label": "Numpy Financial Library",
          "type": "Utility",
          "description": "Provides financial functions for calculations, including payment computations."
        }
      ],
      "edges": [
        {
          "source": "FinancialService.calculate_payment",
          "target": "numpy_financial",
          "label": "USES"
        }
      ]
    }
  },
  "StatsService._load_data": {
    "documentation": "```markdown\n### Description\nThe `_load_data` method retrieves data from a specified SQLite database table and loads it into a pandas DataFrame. It allows for the selection of specific columns; if no columns are specified, all columns from the table are loaded.\n\n### Parameters\n- `db_path` (str): The file path to the SQLite database from which to load data.\n- `table_name` (str): The name of the table in the database to query.\n- `columns` (list, optional): A list of column names to select from the table. If `None`, all columns are loaded.\n\n### Returns\n- `DataFrame`: A pandas DataFrame containing the data retrieved from the specified table and columns.\n\n### Example Usage\n```python\n# Example of loading all columns from a table named 'sales'\ndata = stats_service._load_data('path/to/database.db', 'sales')\n\n# Example of loading specific columns from the same table\ndata = stats_service._load_data('path/to/database.db', 'sales', columns=['date', 'amount'])\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "StatsService._load_data",
          "label": "Data Loader from SQLite",
          "type": "Business Logic",
          "description": "Retrieves data from a specified SQLite database table and loads it into a pandas DataFrame."
        },
        {
          "id": "pandas.DataFrame",
          "label": "Pandas DataFrame",
          "type": "Data Model",
          "description": "A two-dimensional, size-mutable, potentially heterogeneous tabular data structure with labeled axes."
        },
        {
          "id": "sqlite3",
          "label": "SQLite Database Connector",
          "type": "Utility",
          "description": "Provides a lightweight disk-based database that doesn\u2019t require a separate server process."
        }
      ],
      "edges": [
        {
          "source": "StatsService._load_data",
          "target": "sqlite3",
          "label": "USES"
        },
        {
          "source": "StatsService._load_data",
          "target": "pandas.DataFrame",
          "label": "CREATES"
        }
      ]
    }
  },
  "StatsService.perform_ols_regression": {
    "documentation": "```markdown\n### Description\nThe `perform_ols_regression` method performs Ordinary Least Squares (OLS) regression using NumPy's least squares function. It calculates the regression coefficients, intercept, R-squared value, and p-values for the specified dependent and independent variables. This method is useful for statistical analysis and modeling in data science applications.\n\n### Parameters\n- `db_path` (str): The file path to the database from which to load the data.\n- `table_name` (str): The name of the table in the database containing the data.\n- `dependent_var` (str): The name of the dependent variable (the outcome variable) to be predicted.\n- `independent_vars` (list of str): A list of names of independent variables (predictor variables) used in the regression model.\n\n### Returns\n- `dict`: A summary dictionary containing:\n  - `coefficients` (dict): A dictionary mapping variable names to their corresponding coefficients, including the intercept.\n  - `standard_errors` (dict): A dictionary mapping variable names to their standard errors.\n  - `t_statistics` (dict): A dictionary mapping variable names to their t-statistics.\n  - `p_values` (dict): A dictionary mapping variable names to their p-values.\n  - `r_squared` (float): The R-squared value indicating the proportion of variance explained by the model.\n\n### Example Usage\n```python\nstats_service = StatsService()\nresult = stats_service.perform_ols_regression('path/to/database.db', 'data_table', 'outcome_var', ['predictor1', 'predictor2'])\nprint(result)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "StatsService.perform_ols_regression",
          "label": "OLS Regression Performer",
          "type": "Business Logic",
          "description": "Performs Ordinary Least Squares regression and returns statistical summaries."
        }
      ],
      "edges": []
    }
  },
  "StatsService.calculate_correlation_matrix": {
    "documentation": "```markdown\n### Description\nCalculates the Pearson correlation matrix for specified columns in a given database table. This method is useful for identifying the linear relationships between variables in the dataset.\n\n### Parameters\n- `db_path` (str): The file path to the database from which to load the data.\n- `table_name` (str): The name of the table in the database containing the data.\n- `columns` (list of str): A list of column names for which the correlation matrix will be calculated.\n\n### Returns\n- dict: A dictionary representation of the Pearson correlation matrix, where keys are tuples of column names and values are the corresponding correlation coefficients.\n\n### Example Usage\n```python\nstats_service = StatsService()\ncorrelation_matrix = stats_service.calculate_correlation_matrix('path/to/database.db', 'my_table', ['column1', 'column2', 'column3'])\nprint(correlation_matrix)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "StatsService.calculate_correlation_matrix",
          "label": "Correlation Matrix Calculator",
          "type": "Business Logic",
          "description": "Calculates the Pearson correlation matrix for specified columns in a database table to identify linear relationships between variables."
        },
        {
          "id": "DataFrame",
          "label": "DataFrame",
          "type": "Data Model",
          "description": "Represents the structured data loaded from the database for analysis."
        }
      ],
      "edges": [
        {
          "source": "StatsService.calculate_correlation_matrix",
          "target": "DataFrame",
          "label": "USES"
        }
      ]
    }
  },
  "StatsService.perform_independent_ttest": {
    "documentation": "```markdown\n## Description\nThe `perform_independent_ttest` method conducts an independent two-sample t-test to determine if there is a statistically significant difference between the means of two independent samples. This method is part of the `StatsService` class and is useful for statistical analysis in various applications.\n\n## Parameters\n- `sample1` (list or numpy array): The first sample of data for the t-test.\n- `sample2` (list or numpy array): The second sample of data for the t-test.\n\n## Returns\n- `dict`: A dictionary containing the following keys:\n  - `t_statistic` (float): The calculated t-statistic for the t-test.\n  - `p_value` (float): The p-value associated with the t-test, indicating the probability of observing the data if the null hypothesis is true.\n\n## Example Usage\n```python\nfrom app.services.stats_service import StatsService\n\nstats_service = StatsService()\nresult = stats_service.perform_independent_ttest([1, 2, 3], [4, 5, 6])\nprint(result)  # Output: {'t_statistic': ..., 'p_value': ...}\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "StatsService.perform_independent_ttest",
          "label": "Independent Two-Sample T-Test",
          "type": "Business Logic",
          "description": "Conducts an independent two-sample t-test to determine if there is a statistically significant difference between the means of two independent samples."
        }
      ],
      "edges": []
    }
  },
  "StatsService.calculate_standard_deviation": {
    "documentation": "```markdown\n### Description\nCalculates the standard deviation of a list of numbers. This method is part of the `StatsService` class and provides a statistical measure of the amount of variation or dispersion in a set of values.\n\n### Parameters\n- `data` (list): A list of numerical values for which the standard deviation is to be calculated.\n\n### Returns\n- float: The standard deviation of the provided list of numbers.\n\n### Example Usage\n```python\nstats_service = StatsService()\ndata = [10, 12, 23, 23, 16, 23, 21, 16]\nstd_dev = stats_service.calculate_standard_deviation(data)\nprint(std_dev)  # Output: Standard deviation of the data\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "StatsService.calculate_standard_deviation",
          "label": "Standard Deviation Calculator",
          "type": "Business Logic",
          "description": "Calculates the standard deviation of a list of numerical values to measure variation or dispersion."
        }
      ],
      "edges": []
    }
  },
  "StatsService.calculate_descriptive_stats": {
    "documentation": "```markdown\n### Description\nThe `calculate_descriptive_stats` method computes descriptive statistics for a given list of numerical values. It provides a summary of the data by calculating key statistical measures, including mean, median, mode, variance, and standard deviation.\n\n### Parameters\n- `data` (List[float]): A list of numerical values for which the descriptive statistics will be calculated.\n\n### Returns\n- `dict`: A dictionary containing the following statistical measures:\n  - `mean`: The average of the numbers.\n  - `median`: The middle value when the numbers are sorted.\n  - `mode`: The most frequently occurring number in the list.\n  - `variance`: A measure of how much the numbers vary from the mean.\n  - `std_dev`: The standard deviation, indicating the dispersion of the numbers.\n\n### Example Usage\n```python\nstats_service = StatsService()\ndata = [1.0, 2.0, 2.0, 3.0, 4.0]\ndescriptive_stats = stats_service.calculate_descriptive_stats(data)\nprint(descriptive_stats)\n# Output: {'mean': 2.4, 'median': 2.0, 'mode': 2.0, 'variance': 1.36, 'std_dev': 1.1661903789690605}\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "StatsService.calculate_descriptive_stats",
          "label": "Descriptive Statistics Calculator",
          "type": "Business Logic",
          "description": "Calculates and returns key descriptive statistics for a list of numerical values."
        }
      ],
      "edges": []
    }
  },
  "StatsService.calculate_z_scores": {
    "documentation": "```markdown\n### Description\nCalculates the Z-Scores for a list of numerical values. Z-Scores indicate how many standard deviations an element is from the mean of the dataset, providing a way to standardize scores on a common scale.\n\n### Parameters\n- `data` (List[float]): A list of numerical values for which Z-Scores will be calculated.\n\n### Returns\n- List[float]: A list of Z-Scores corresponding to the input data, rounded to four decimal places.\n\n### Example Usage\n```python\nfrom app.services.stats_service import StatsService\n\nstats_service = StatsService()\ndata = [10, 12, 23, 23, 16, 23, 21, 16]\nz_scores = stats_service.calculate_z_scores(data)\nprint(z_scores)  # Output: [ -1.1832, -0.5071, 1.1832, 1.1832, -0.8454, 1.1832, 0.5071, -0.8454 ]\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "StatsService.calculate_z_scores",
          "label": "Z-Score Calculator",
          "type": "Business Logic",
          "description": "Calculates the Z-Scores for a list of numerical values to standardize scores."
        }
      ],
      "edges": []
    }
  },
  "StatsService.calculate_confidence_interval": {
    "documentation": "```markdown\n### Description\nCalculates the confidence interval for a given list of numerical data. This method provides a statistical range within which the true population mean is expected to fall, based on the sample data and a specified confidence level.\n\n### Parameters\n- `data` (List[float]): A list of numerical values for which the confidence interval is to be calculated.\n- `confidence` (float): The confidence level for the interval, expressed as a decimal (e.g., 0.95 for a 95% confidence level).\n\n### Returns\n- `dict`: A dictionary containing the following keys:\n  - `mean` (float): The mean of the input data.\n  - `confidence_level` (float): The specified confidence level.\n  - `interval` (List[float]): A list containing the lower and upper bounds of the confidence interval.\n\n### Example Usage\n```python\nfrom app.services.stats_service import StatsService\n\nstats_service = StatsService()\ndata = [10, 12, 14, 16, 18]\nconfidence_level = 0.95\nresult = stats_service.calculate_confidence_interval(data, confidence_level)\nprint(result)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "StatsService.calculate_confidence_interval",
          "label": "Confidence Interval Calculator",
          "type": "Business Logic",
          "description": "Calculates the confidence interval for a given list of numerical data based on a specified confidence level."
        },
        {
          "id": "numpy",
          "label": "NumPy Library",
          "type": "Utility",
          "description": "Provides support for numerical operations, including mean calculation."
        },
        {
          "id": "scipy.stats",
          "label": "SciPy Stats Library",
          "type": "Utility",
          "description": "Offers statistical functions, including standard error and t-distribution calculations."
        }
      ],
      "edges": [
        {
          "source": "StatsService.calculate_confidence_interval",
          "target": "numpy",
          "label": "USES"
        },
        {
          "source": "StatsService.calculate_confidence_interval",
          "target": "scipy.stats",
          "label": "USES"
        }
      ]
    }
  },
  "ValidationService.__init__": {
    "documentation": "```markdown\n### Description\nInitializes the `ValidationService` with a dependency on the `DataService`. This service is responsible for performing various validation tasks, leveraging the functionality provided by the `DataService`.\n\n### Parameters/Attributes\n- `data_svc` (DataService, optional): An instance of `DataService` that the `ValidationService` will use for its operations. Defaults to a predefined `data_service`.\n\n### Returns\nNone\n\n### Example Usage\n```python\ndata_service_instance = DataService()\nvalidation_service = ValidationService(data_svc=data_service_instance)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "ValidationService.__init__",
          "label": "Validation Service Initialization",
          "type": "Business Logic",
          "description": "Initializes the ValidationService with a dependency on DataService for validation tasks."
        },
        {
          "id": "DataService",
          "label": "Data Service",
          "type": "Utility",
          "description": "Provides data-related functionalities that the ValidationService utilizes for its operations."
        }
      ],
      "edges": [
        {
          "source": "ValidationService.__init__",
          "target": "DataService",
          "label": "USES"
        }
      ]
    }
  },
  "APIException": {
    "documentation": "```markdown\n# APIException Class\n\n## Description\nThe `APIException` class is a custom base exception designed for handling errors in the API. It facilitates the creation of a structured exception handler in `main.py`, enabling the return of structured JSON error messages to clients.\n\n## Parameters/Attributes\n- `status_code` (int): The HTTP status code associated with the error.\n- `detail` (str): A detailed message providing context about the error.\n\n## Returns\nNone\n\n## Example Usage\n```python\nraise APIException(status_code=404, detail=\"Resource not found.\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "APIException",
          "label": "API Exception Handler",
          "type": "Business Logic",
          "description": "Handles errors in the API by providing structured JSON error messages."
        }
      ],
      "edges": []
    }
  },
  "CalculationError": {
    "documentation": "```markdown\n# CalculationError Class\n\n## Description\nThe `CalculationError` class is a custom exception that inherits from `APIException`. It is designed to signal errors that occur during mathematical calculations, providing a clear and descriptive message about the issue encountered.\n\n## Parameters/Attributes\n- `detail` (str, optional): A descriptive message detailing the calculation error. Defaults to 'A calculation error occurred.'.\n\n## Returns\nNone\n\n## Example Usage\n```python\nraise CalculationError(\"Division by zero encountered.\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "CalculationError",
          "label": "Calculation Error Exception",
          "type": "Business Logic",
          "description": "Signals errors that occur during mathematical calculations with a descriptive message."
        },
        {
          "id": "APIException",
          "label": "API Exception Base Class",
          "type": "Utility",
          "description": "Base class for all API-related exceptions, providing common functionality."
        }
      ],
      "edges": [
        {
          "source": "CalculationError",
          "target": "APIException",
          "label": "INHERITS_FROM"
        }
      ]
    }
  },
  "DataError": {
    "documentation": "```markdown\n# DataError Class\n\n## Description\nThe `DataError` class is a custom exception that inherits from `APIException`. It is specifically designed to be raised when there is an error related to data processing. This exception provides a clear indication of the issue through a detailed message.\n\n## Parameters/Attributes\n- `detail` (str, optional): A message providing details about the error. Defaults to 'An error occurred while processing data.'.\n\n## Returns\nNone\n\n## Example Usage\n```python\nraise DataError(\"Invalid data format provided.\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "DataError",
          "label": "Data Processing Error Exception",
          "type": "Business Logic",
          "description": "Represents a custom exception raised during data processing errors."
        },
        {
          "id": "APIException",
          "label": "Base API Exception",
          "type": "Utility",
          "description": "Serves as the base class for all API-related exceptions."
        }
      ],
      "edges": [
        {
          "source": "DataError",
          "target": "APIException",
          "label": "INHERITS_FROM"
        }
      ]
    }
  },
  "TTestInput": {
    "documentation": "```markdown\n# TTestInput Class Documentation\n\n## Description\nThe `TTestInput` class models the input for an independent t-test. It ensures that the two samples provided for the t-test are not identical, which is a requirement for valid statistical analysis. If the samples are found to be the same, a `ValueError` is raised to prevent incorrect calculations.\n\n## Parameters/Attributes\n- **sample1** (`List[float]`): A list of float values representing the first sample. Must contain at least two elements.\n- **sample2** (`List[float]`): A list of float values representing the second sample. Must contain at least two elements.\n\n## Returns\n- **None**: The class does not return a value upon instantiation. It raises a `ValueError` if the validation fails.\n\n## Example Usage\n```python\nfrom app.models.calculator import TTestInput\n\ntry:\n    t_test_input = TTestInput(sample1=[1, 2, 3], sample2=[1, 2, 3])\nexcept ValueError as e:\n    print(e)  # Output: Sample 1 and Sample 2 cannot be identical for a t-test.\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "TTestInput",
          "label": "Independent T-Test Input Model",
          "type": "Data Model",
          "description": "Models the input for an independent t-test and validates that the samples are not identical."
        },
        {
          "id": "samples_must_not_be_identical",
          "label": "Sample Validation Logic",
          "type": "Business Logic",
          "description": "Validates that the two samples provided for the t-test are not identical."
        }
      ],
      "edges": [
        {
          "source": "TTestInput",
          "target": "samples_must_not_be_identical",
          "label": "USES"
        }
      ]
    }
  },
  "RegressionInput": {
    "documentation": "```markdown\n# RegressionInput Class Documentation\n\n## Description\nThe `RegressionInput` class models an Ordinary Least Squares (OLS) regression input, ensuring that the dependent variable is distinct from the independent variables. It validates the input to maintain the integrity of the regression model's variable definitions.\n\n## Parameters/Attributes\n- `table_name` (Type: `str`): The name of the database table containing the data for the regression analysis.\n- `dependent_var` (Type: `str`): The name of the dependent variable in the regression model.\n- `independent_vars` (Type: `List[str]`): A list of independent variable names. Must contain at least one variable.\n- `db_path` (Type: `str`): The file path to the database. Defaults to `'data/sample_database.db'`.\n\n## Returns\n- None\n\n## Example Usage\n```python\nfrom app.models.calculator import RegressionInput\n\n# Creating an instance of RegressionInput\ntry:\n    regression_input = RegressionInput(\n        table_name='my_table',\n        dependent_var='dependent_var',\n        independent_vars=['independent_var1', 'independent_var2']\n    )\nexcept ValueError as e:\n    print(e)  # This will not raise an error as the dependent variable is not in independent_vars.\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "RegressionInput",
          "label": "OLS Regression Input Model",
          "type": "Data Model",
          "description": "Models the input for an Ordinary Least Squares regression, ensuring variable integrity."
        },
        {
          "id": "dependent_var_not_in_independent",
          "label": "Dependent Variable Validator",
          "type": "Business Logic",
          "description": "Validates that the dependent variable is not included in the independent variables."
        }
      ],
      "edges": [
        {
          "source": "RegressionInput",
          "target": "dependent_var_not_in_independent",
          "label": "USES"
        }
      ]
    }
  },
  "CorrelationInput": {
    "documentation": "```markdown\n# CorrelationInput Class\n\n## Description\nThe `CorrelationInput` class models the input required for generating a correlation matrix. It ensures that at least two columns are specified when validating the input, which is essential for performing correlation calculations.\n\n## Parameters/Attributes\n- `table_name` (type: `str`): The name of the table from which the correlation data will be derived.\n- `columns` (type: `Optional[List[str]]`): A list of column names to be included in the correlation matrix. This can be `None` or a list of strings.\n- `db_path` (type: `str`): The path to the database file. Defaults to `'data/sample_database.db'`.\n\n## Returns\nNone\n\n## Example Usage\n```python\n# Creating an instance of CorrelationInput with valid columns\ncorrelation_input = CorrelationInput(table_name='my_table', columns=['column1', 'column2'])\n\n# Attempting to validate columns with insufficient entries\ntry:\n    CorrelationInput.check_min_columns(['column1'])  # This will raise a ValueError\nexcept ValueError as e:\n    print(e)  # Output: At least two columns must be specified for a correlation matrix.\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "CorrelationInput",
          "label": "Correlation Input Model",
          "type": "Data Model",
          "description": "Models the input required for generating a correlation matrix, ensuring at least two columns are specified."
        },
        {
          "id": "check_min_columns",
          "label": "Column Validation Logic",
          "type": "Business Logic",
          "description": "Validates that at least two columns are provided for correlation calculations."
        }
      ],
      "edges": [
        {
          "source": "CorrelationInput",
          "target": "check_min_columns",
          "label": "USES"
        }
      ]
    }
  },
  "MatrixInput": {
    "documentation": "```markdown\n# MatrixInput Class\n\n## Description\nThe `MatrixInput` class models matrix operations, providing validation to ensure that the matrix is square and includes a helper function to convert the matrix into a NumPy array. This class is essential for performing mathematical operations that require square matrices, such as certain linear algebra computations.\n\n## Parameters/Attributes\n- `matrix` (type: `List[List[float]]`): A list of lists representing the matrix. This attribute is required and must contain at least one row.\n\n## Returns\nNone\n\n## Example Usage\n```python\nmatrix_input = MatrixInput([[1, 2], [3, 4]])\nnumpy_array = matrix_input.to_numpy_array()\nprint(numpy_array)  # Output: [[1 2]\n                     #          [3 4]]\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "MatrixInput",
          "label": "Matrix Input Class",
          "type": "Data Model",
          "description": "Models matrix operations and ensures the matrix is square for mathematical computations."
        },
        {
          "id": "matrix_must_be_square",
          "label": "Matrix Square Validator",
          "type": "Business Logic",
          "description": "Validates that the provided matrix is square, raising errors for invalid matrices."
        },
        {
          "id": "to_numpy_array",
          "label": "NumPy Array Converter",
          "type": "Utility",
          "description": "Converts the internal matrix representation to a NumPy array for numerical operations."
        }
      ],
      "edges": [
        {
          "source": "MatrixInput",
          "target": "matrix_must_be_square",
          "label": "VALIDATES"
        },
        {
          "source": "MatrixInput",
          "target": "to_numpy_array",
          "label": "USES"
        }
      ]
    }
  },
  "FutureValueInput": {
    "documentation": "```markdown\n# FutureValueInput Class\n\n## Description\nThe `FutureValueInput` class models the inputs required for calculating the future value of an investment. It validates cash flow conventions to ensure that cash outflows are represented correctly as negative values, thereby maintaining the integrity of financial calculations.\n\n## Parameters/Attributes\n- `rate` (Type: `float`): The interest rate per period (e.g., `0.05` for 5%). Must be greater than 0.\n- `nper` (Type: `int`): The total number of payment periods. Must be greater than 0.\n- `pmt` (Type: `float`): The payment made each period, which should conventionally be negative to represent cash outflow.\n- `pv` (Type: `float`): The present value, which should also be conventionally negative to represent cash outflow.\n\n## Returns\nNone\n\n## Example Usage\n```python\nfrom app.models.calculator import FutureValueInput\n\n# Creating an instance of FutureValueInput with valid parameters\nfv_input = FutureValueInput(rate=0.05, nper=10, pmt=-100, pv=-500)\n\n# This will raise a ValueError due to invalid cash outflow\ntry:\n    FutureValueInput(rate=0.05, nper=10, pmt=100, pv=-500)\nexcept ValueError as e:\n    print(e)  # Output: 'pmt' represents cash outflow and should be zero or negative.\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "FutureValueInput",
          "label": "Future Value Input Model",
          "type": "Data Model",
          "description": "Models the inputs required for calculating the future value of an investment and validates cash flow conventions."
        },
        {
          "id": "cash_outflow_must_be_negative",
          "label": "Cash Outflow Validation",
          "type": "Business Logic",
          "description": "Validates that cash outflow parameters are zero or negative to maintain financial calculation integrity."
        }
      ],
      "edges": [
        {
          "source": "FutureValueInput",
          "target": "cash_outflow_must_be_negative",
          "label": "USES"
        }
      ]
    }
  },
  "FinancialService": {
    "documentation": "```markdown\n# FinancialService Class\n\n## Description\nThe `FinancialService` class provides methods for performing common financial calculations, including future value, present value, and periodic payment calculations. It leverages the `numpy_financial` library to execute these financial computations efficiently.\n\n## Parameters/Attributes\nNone\n\n## Returns\nNone\n\n## Example Usage\n```python\nfinancial_service = FinancialService()\n\n# Calculate future value\nfuture_value = financial_service.calculate_future_value(rate=0.05, nper=10, pmt=100, pv=1000)\nprint(f\"The future value of the investment is: {future_value}\")\n\n# Calculate present value\npresent_value = financial_service.calculate_present_value(rate=0.05, nper=10, pmt=-100, fv=1000)\nprint(f\"The present value of the investment is: {present_value}\")\n\n# Calculate periodic payment\npayment = financial_service.calculate_payment(rate=0.05, nper=60, pv=10000)\nprint(f\"The periodic payment amount is: {payment}\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "FinancialService",
          "label": "Financial Service Class",
          "type": "Business Logic",
          "description": "Provides methods for performing common financial calculations such as future value, present value, and periodic payment."
        },
        {
          "id": "calculate_future_value",
          "label": "Future Value Calculator",
          "type": "Business Logic",
          "description": "Calculates the future value of an investment based on interest rate, number of periods, payment amount, and present value."
        },
        {
          "id": "calculate_present_value",
          "label": "Present Value Calculator",
          "type": "Business Logic",
          "description": "Calculates the present value of an investment based on interest rate, number of periods, payment amount, and future value."
        },
        {
          "id": "calculate_payment",
          "label": "Payment Calculator",
          "type": "Business Logic",
          "description": "Calculates the periodic payment required for a loan based on interest rate, number of periods, and present value."
        }
      ],
      "edges": [
        {
          "source": "FinancialService",
          "target": "calculate_future_value",
          "label": "USES"
        },
        {
          "source": "FinancialService",
          "target": "calculate_present_value",
          "label": "USES"
        },
        {
          "source": "FinancialService",
          "target": "calculate_payment",
          "label": "USES"
        }
      ]
    }
  },
  "StatsService": {
    "documentation": "```markdown\n# StatsService Class Documentation\n\n## Description\nThe `StatsService` class provides a collection of statistical methods for data analysis, including loading data from a SQLite database, performing regression analysis, calculating correlation matrices, conducting t-tests, and computing various statistical metrics. This class is designed to facilitate statistical computations commonly required in data science applications.\n\n## Parameters/Attributes\nNone\n\n## Methods\n- **_load_data(db_path: str, table_name: str, columns=None)**\n  - Loads data from a specified SQLite database table into a pandas DataFrame. If no columns are specified, all columns are loaded.\n\n- **perform_ols_regression(db_path: str, table_name: str, dependent_var: str, independent_vars: list)**\n  - Performs Ordinary Least Squares (OLS) regression and returns a summary of coefficients, standard errors, t-statistics, p-values, and R-squared value.\n\n- **calculate_correlation_matrix(db_path: str, table_name: str, columns: list)**\n  - Calculates the Pearson correlation matrix for specified columns in a database table.\n\n- **perform_independent_ttest(sample1: list or numpy array, sample2: list or numpy array)**\n  - Conducts an independent two-sample t-test to determine if there is a statistically significant difference between the means of two independent samples.\n\n- **calculate_standard_deviation(data: list) -> float**\n  - Calculates the standard deviation of a list of numerical values.\n\n- **calculate_descriptive_stats(data: List[float]) -> dict**\n  - Computes descriptive statistics (mean, median, mode, variance, standard deviation) for a given list of numerical values.\n\n- **calculate_z_scores(data: List[float]) -> List[float]**\n  - Calculates the Z-Scores for a list of numerical values, indicating how many standard deviations each element is from the mean.\n\n- **calculate_confidence_interval(data: List[float], confidence: float) -> dict**\n  - Calculates the confidence interval for a given list of numerical data based on a specified confidence level.\n\n## Returns\nNone\n\n## Example Usage\n```python\nstats_service = StatsService()\nresult = stats_service.perform_ols_regression('path/to/database.db', 'data_table', 'outcome_var', ['predictor1', 'predictor2'])\nprint(result)\n```\n```python\ncorrelation_matrix = stats_service.calculate_correlation_matrix('path/to/database.db', 'my_table', ['column1', 'column2', 'column3'])\nprint(correlation_matrix)\n```\n```python\ndata = [10, 12, 14, 16, 18]\nconfidence_level = 0.95\nresult = stats_service.calculate_confidence_interval(data, confidence_level)\nprint(result)\n```\n```python\nstd_dev = stats_service.calculate_standard_deviation([10, 12, 23, 23, 16, 23, 21, 16])\nprint(std_dev)\n```\n```python\ndescriptive_stats = stats_service.calculate_descriptive_stats([1.0, 2.0, 2.0, 3.0, 4.0])\nprint(descriptive_stats)\n```\n```python\nz_scores = stats_service.calculate_z_scores([10, 12, 23, 23, 16, 23, 21, 16])\nprint(z_scores)\n```\n```python\nt_test_result = stats_service.perform_independent_ttest([1, 2, 3], [4, 5, 6])\nprint(t_test_result)\n```\n```python\ndata = stats_service._load_data('path/to/database.db', 'sales')\nprint(data)\n```\n```python\ndata_specific = stats_service._load_data('path/to/database.db', 'sales', columns=['date', 'amount'])\nprint(data_specific)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "StatsService",
          "label": "Statistical Analysis Service",
          "type": "Business Logic",
          "description": "Provides a collection of statistical methods for data analysis, including regression, correlation, and descriptive statistics."
        },
        {
          "id": "_load_data",
          "label": "Data Loader",
          "type": "Utility",
          "description": "Loads data from a SQLite database into a pandas DataFrame."
        },
        {
          "id": "perform_ols_regression",
          "label": "OLS Regression Performer",
          "type": "Business Logic",
          "description": "Performs Ordinary Least Squares regression and returns a summary of statistical metrics."
        },
        {
          "id": "calculate_correlation_matrix",
          "label": "Correlation Matrix Calculator",
          "type": "Business Logic",
          "description": "Calculates the Pearson correlation matrix for specified columns in a database table."
        },
        {
          "id": "perform_independent_ttest",
          "label": "Independent T-Test Performer",
          "type": "Business Logic",
          "description": "Conducts an independent two-sample t-test to compare means of two samples."
        },
        {
          "id": "calculate_standard_deviation",
          "label": "Standard Deviation Calculator",
          "type": "Utility",
          "description": "Calculates the standard deviation of a list of numerical values."
        },
        {
          "id": "calculate_descriptive_stats",
          "label": "Descriptive Statistics Calculator",
          "type": "Utility",
          "description": "Computes descriptive statistics for a given list of numerical values."
        },
        {
          "id": "calculate_z_scores",
          "label": "Z-Score Calculator",
          "type": "Utility",
          "description": "Calculates Z-Scores for a list of numerical values."
        },
        {
          "id": "calculate_confidence_interval",
          "label": "Confidence Interval Calculator",
          "type": "Utility",
          "description": "Calculates the confidence interval for a given list of numerical data."
        }
      ],
      "edges": [
        {
          "source": "StatsService",
          "target": "_load_data",
          "label": "USES"
        },
        {
          "source": "StatsService",
          "target": "perform_ols_regression",
          "label": "USES"
        },
        {
          "source": "StatsService",
          "target": "calculate_correlation_matrix",
          "label": "USES"
        },
        {
          "source": "StatsService",
          "target": "perform_independent_ttest",
          "label": "USES"
        },
        {
          "source": "StatsService",
          "target": "calculate_standard_deviation",
          "label": "USES"
        },
        {
          "source": "StatsService",
          "target": "calculate_descriptive_stats",
          "label": "USES"
        },
        {
          "source": "StatsService",
          "target": "calculate_z_scores",
          "label": "USES"
        },
        {
          "source": "StatsService",
          "target": "calculate_confidence_interval",
          "label": "USES"
        }
      ]
    }
  },
  "perform_regression": {
    "documentation": "```markdown\n# perform_regression Function\n\n## Description\nThe `perform_regression` function handles HTTP POST requests to perform Ordinary Least Squares (OLS) regression analysis. It validates the input data, executes the regression using the provided parameters, and returns a summary of the results. This function is part of the API for statistical analysis.\n\n## Parameters\n- `payload` (RegressionInput): An object containing the input data required for the regression analysis, including database path, table name, dependent variable, and independent variables.\n- `validator` (ValidationService, optional): An instance of the validation service used to validate the regression inputs. Defaults to a dependency injection of the `validation_service`.\n- `stats_svc` (StatsService, optional): An instance of the statistics service used to perform the OLS regression. Defaults to a dependency injection of the `stats_service`.\n\n## Returns\n- `dict`: A dictionary containing the analysis type and the results summary of the OLS regression.\n\n## Example Usage\n```python\nresponse = perform_regression(payload)\nprint(response)  # Output: {'analysis_type': 'OLS Regression', 'results_summary': <summary>}\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "perform_regression",
          "label": "OLS Regression Handler",
          "type": "Business Logic",
          "description": "Handles HTTP POST requests to perform Ordinary Least Squares regression analysis and returns a summary of the results."
        },
        {
          "id": "RegressionInput",
          "label": "Regression Input Data",
          "type": "Data Model",
          "description": "Contains the input data required for the regression analysis, including database path, table name, and variables."
        },
        {
          "id": "ValidationService",
          "label": "Input Validation Service",
          "type": "Utility",
          "description": "Validates the regression inputs to ensure they meet the required criteria."
        },
        {
          "id": "StatsService",
          "label": "Statistics Service",
          "type": "Utility",
          "description": "Performs the Ordinary Least Squares regression analysis using the provided input data."
        },
        {
          "id": "APIException",
          "label": "API Exception Handler",
          "type": "Utility",
          "description": "Custom exception class for handling errors in the API and returning structured JSON error messages."
        }
      ],
      "edges": [
        {
          "source": "perform_regression",
          "target": "RegressionInput",
          "label": "REQUIRES"
        },
        {
          "source": "perform_regression",
          "target": "ValidationService",
          "label": "USES"
        },
        {
          "source": "perform_regression",
          "target": "StatsService",
          "label": "USES"
        },
        {
          "source": "perform_regression",
          "target": "APIException",
          "label": "THROWS"
        }
      ]
    }
  },
  "get_correlation_matrix": {
    "documentation": "```markdown\n# get_correlation_matrix\n\n## Description\nThe `get_correlation_matrix` function calculates a correlation matrix based on the provided input data. It validates the input parameters and utilizes the `StatsService` to compute the correlation matrix, returning the results in a structured format. This function is part of the API's statistical analysis endpoints.\n\n## Parameters\n- `payload` (CorrelationInput): An object containing the input data required for calculating the correlation matrix, including the database path, table name, and columns to analyze.\n- `validator` (ValidationService, optional): An instance of the validation service used to validate the input parameters. Defaults to a dependency-injected instance.\n- `stats_svc` (StatsService, optional): An instance of the statistics service used to perform the correlation matrix calculation. Defaults to a dependency-injected instance.\n\n## Returns\n- dict: A dictionary containing the analysis type, table name, and the calculated correlation matrix. The structure is as follows:\n  - `analysis_type` (str): A string indicating the type of analysis performed (e.g., \"Correlation Matrix\").\n  - `table` (str): The name of the table from which the correlation matrix was derived.\n  - `correlation_matrix` (list): The computed correlation matrix.\n\n## Example Usage\n```python\ncorrelation_input = CorrelationInput(db_path='path/to/database', table_name='my_table', columns=['col1', 'col2', 'col3'])\nresult = get_correlation_matrix(correlation_input)\nprint(result)\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "get_correlation_matrix",
          "label": "Correlation Matrix Calculation",
          "type": "Business Logic",
          "description": "Calculates a correlation matrix based on input data and returns the results."
        },
        {
          "id": "CorrelationInput",
          "label": "Correlation Input Data",
          "type": "Data Model",
          "description": "Contains the input data required for calculating the correlation matrix."
        },
        {
          "id": "ValidationService",
          "label": "Input Validation Service",
          "type": "Utility",
          "description": "Validates the input parameters for the correlation matrix calculation."
        },
        {
          "id": "StatsService",
          "label": "Statistics Calculation Service",
          "type": "Utility",
          "description": "Performs the statistical calculations needed to compute the correlation matrix."
        },
        {
          "id": "APIException",
          "label": "API Exception Handler",
          "type": "Utility",
          "description": "Handles errors in the API and returns structured JSON error messages."
        }
      ],
      "edges": [
        {
          "source": "get_correlation_matrix",
          "target": "CorrelationInput",
          "label": "REQUIRES"
        },
        {
          "source": "get_correlation_matrix",
          "target": "ValidationService",
          "label": "USES"
        },
        {
          "source": "get_correlation_matrix",
          "target": "StatsService",
          "label": "USES"
        },
        {
          "source": "get_correlation_matrix",
          "target": "APIException",
          "label": "THROWS"
        }
      ]
    }
  },
  "perform_ttest": {
    "documentation": "```markdown\n## Description\nThe `perform_ttest` function is an API endpoint that performs an independent two-sample t-test on two provided samples. It processes input data through the `TTestInput` model and utilizes the `StatsService` to compute the statistical analysis. The function returns the results of the t-test in a structured format, or raises an `APIException` if an error occurs during processing.\n\n## Parameters\n- `payload` (TTestInput): An object containing two samples (`sample1` and `sample2`) for the t-test.\n- `service` (StatsService, optional): An instance of the `StatsService` class, which provides statistical analysis methods. Defaults to a dependency-injected instance.\n\n## Returns\n- dict: A dictionary containing the analysis type and the results of the t-test. The structure is as follows:\n  - `analysis_type` (str): A description of the analysis performed.\n  - `results` (any): The results of the independent t-test.\n\n## Example Usage\n```python\nresponse = perform_ttest(TTestInput(sample1=[1, 2, 3], sample2=[4, 5, 6]))\nprint(response)\n# Output: {'analysis_type': 'Independent Two-Sample T-Test', 'results': ...}\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "perform_ttest",
          "label": "Independent Two-Sample T-Test API",
          "type": "Business Logic",
          "description": "Handles the execution of an independent two-sample t-test on provided data samples."
        },
        {
          "id": "TTestInput",
          "label": "TTestInput Model",
          "type": "Data Model",
          "description": "Represents the input structure containing two samples for the t-test."
        },
        {
          "id": "StatsService",
          "label": "Statistics Service",
          "type": "Business Logic",
          "description": "Provides methods for performing statistical analyses, including t-tests."
        },
        {
          "id": "APIException",
          "label": "API Exception Handler",
          "type": "Utility",
          "description": "Custom exception class for handling API errors and returning structured error messages."
        }
      ],
      "edges": [
        {
          "source": "perform_ttest",
          "target": "TTestInput",
          "label": "RECEIVES"
        },
        {
          "source": "perform_ttest",
          "target": "StatsService",
          "label": "USES"
        },
        {
          "source": "perform_ttest",
          "target": "APIException",
          "label": "RAISES"
        }
      ]
    }
  },
  "calculate_std_deviation": {
    "documentation": "```markdown\n# calculate_std_deviation Function\n\n## Description\nThe `calculate_std_deviation` function is an API endpoint that calculates the standard deviation of a given dataset. It accepts input data through a POST request and utilizes the `StatsService` to perform the calculation. In case of errors during the calculation, it raises a structured `APIException` to provide meaningful feedback to the client.\n\n## Parameters/Attributes\n- `payload` (StdDevInput): An object containing the input data for which the standard deviation is to be calculated.\n- `stats_svc` (StatsService, optional): An instance of `StatsService` used to perform the standard deviation calculation. It is injected using FastAPI's dependency injection system.\n\n## Returns\n- dict: A dictionary containing the analysis type and the calculated standard deviation result. The structure is as follows:\n  - `analysis_type` (str): A string indicating the type of analysis performed (e.g., \"Standard Deviation\").\n  - `result` (float): The calculated standard deviation of the input data.\n\n## Example Usage\n```python\nresponse = calculate_std_deviation(payload=StdDevInput(data=[1, 2, 3, 4, 5]))\nprint(response)  # Output: {'analysis_type': 'Standard Deviation', 'result': 1.4142135623730951}\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "calculate_std_deviation",
          "label": "Standard Deviation Calculator",
          "type": "Business Logic",
          "description": "Calculates the standard deviation of a given dataset and returns the result."
        },
        {
          "id": "APIException",
          "label": "API Exception Handler",
          "type": "Utility",
          "description": "Handles errors in the API by providing structured JSON error messages."
        },
        {
          "id": "StatsService",
          "label": "Statistics Service",
          "type": "Business Logic",
          "description": "Performs statistical calculations, including standard deviation."
        }
      ],
      "edges": [
        {
          "source": "calculate_std_deviation",
          "target": "APIException",
          "label": "RAISES"
        },
        {
          "source": "calculate_std_deviation",
          "target": "StatsService",
          "label": "USES"
        }
      ]
    }
  },
  "get_descriptive_stats": {
    "documentation": "```markdown\n# get_descriptive_stats Function\n\n## Description\nThe `get_descriptive_stats` function is an API endpoint that calculates descriptive statistics based on the provided input data. It processes a payload containing statistical data and returns the results in a structured format. This function is part of the statistics module in the API and is designed to facilitate data analysis.\n\n## Parameters\n- `payload` (DescriptiveStatsInput): An object containing the input data for which descriptive statistics are to be calculated.\n- `stats_svc` (StatsService, optional): An instance of the `StatsService` class, injected via dependency injection. It provides the method to compute the descriptive statistics. Defaults to a lambda function that returns the `stats_service`.\n\n## Returns\n- `dict`: A dictionary containing the analysis type and the calculated results. The structure is as follows:\n  - `analysis_type` (str): A string indicating the type of analysis performed, which is 'Descriptive Statistics'.\n  - `results` (any): The computed descriptive statistics based on the input data.\n\n## Example Usage\n```python\nresponse = get_descriptive_stats(payload=DescriptiveStatsInput(data=[1, 2, 3, 4, 5]))\nprint(response)\n# Output: {'analysis_type': 'Descriptive Statistics', 'results': {...}}\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "get_descriptive_stats",
          "label": "Descriptive Statistics Calculator",
          "type": "Business Logic",
          "description": "Calculates and returns descriptive statistics based on input data."
        },
        {
          "id": "DescriptiveStatsInput",
          "label": "Descriptive Stats Input Model",
          "type": "Data Model",
          "description": "Represents the input data structure for descriptive statistics calculations."
        },
        {
          "id": "StatsService",
          "label": "Statistics Service",
          "type": "Business Logic",
          "description": "Provides methods to compute various statistical analyses."
        },
        {
          "id": "APIException",
          "label": "API Exception Handler",
          "type": "Utility",
          "description": "Custom exception for handling API errors and returning structured error messages."
        }
      ],
      "edges": [
        {
          "source": "get_descriptive_stats",
          "target": "DescriptiveStatsInput",
          "label": "RECEIVES"
        },
        {
          "source": "get_descriptive_stats",
          "target": "StatsService",
          "label": "USES"
        },
        {
          "source": "get_descriptive_stats",
          "target": "APIException",
          "label": "THROWS"
        }
      ]
    }
  },
  "get_confidence_interval": {
    "documentation": "```markdown\n# get_confidence_interval\n\n## Description\nThe `get_confidence_interval` function calculates the confidence interval for a given dataset's mean based on the specified confidence level. It serves as an endpoint in the API, allowing clients to submit data and receive statistical analysis results.\n\n## Parameters\n- `payload` (ConfidenceIntervalInput): An object containing the input data for the confidence interval calculation, including:\n  - `data` (list): A list of numerical values for which the confidence interval is to be calculated.\n  - `confidence` (float): The confidence level (between 0 and 1) for the interval calculation.\n- `stats_svc` (StatsService, optional): An instance of the `StatsService` class, injected via dependency injection. Defaults to a lambda function returning the `stats_service`.\n\n## Returns\n- `dict`: A dictionary containing:\n  - `analysis_type` (str): A string indicating the type of analysis performed, which is 'Confidence Interval'.\n  - `results` (any): The calculated confidence interval based on the provided data and confidence level.\n\n## Example Usage\n```python\nresponse = get_confidence_interval(payload=ConfidenceIntervalInput(data=[1, 2, 3, 4, 5], confidence=0.95))\nprint(response)\n# Output: {'analysis_type': 'Confidence Interval', 'results': <calculated_interval>}\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "get_confidence_interval",
          "label": "Confidence Interval Calculation",
          "type": "Business Logic",
          "description": "Calculates the confidence interval for a dataset's mean based on a specified confidence level."
        },
        {
          "id": "APIException",
          "label": "API Exception Handler",
          "type": "Utility",
          "description": "Custom exception class for handling API errors and returning structured JSON error messages."
        },
        {
          "id": "ConfidenceIntervalInput",
          "label": "Confidence Interval Input Model",
          "type": "Data Model",
          "description": "Data structure containing input values for the confidence interval calculation."
        },
        {
          "id": "StatsService",
          "label": "Statistics Service",
          "type": "Business Logic",
          "description": "Service class responsible for performing statistical calculations, including confidence intervals."
        }
      ],
      "edges": [
        {
          "source": "get_confidence_interval",
          "target": "APIException",
          "label": "RAISES"
        },
        {
          "source": "get_confidence_interval",
          "target": "ConfidenceIntervalInput",
          "label": "RECEIVES"
        },
        {
          "source": "get_confidence_interval",
          "target": "StatsService",
          "label": "USES"
        }
      ]
    }
  },
  "get_z_scores": {
    "documentation": "```markdown\n# get_z_scores Function\n\n## Description\nThe `get_z_scores` function is an API endpoint that calculates z-scores based on the provided input data. It processes a payload containing statistical data and returns the computed z-scores, facilitating statistical analysis in the application.\n\n## Parameters/Attributes\n- `payload` (ZScoreInput): An object containing the input data for which z-scores are to be calculated.\n- `stats_svc` (StatsService, optional): An instance of the `StatsService` class, used to perform the z-score calculation. It defaults to a dependency-injected service.\n\n## Returns\n- dict: A dictionary containing the analysis type and the calculated z-scores. The structure is as follows:\n  - `analysis_type` (str): A string indicating the type of analysis performed (e.g., 'Z-Scores').\n  - `z_scores` (list): A list of calculated z-scores based on the input data.\n\n## Example Usage\n```python\nresponse = get_z_scores(ZScoreInput(data=[10, 20, 30, 40, 50]))\nprint(response)  # Output: {'analysis_type': 'Z-Scores', 'z_scores': [...]}\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "get_z_scores",
          "label": "Z-Scores Calculation Endpoint",
          "type": "Business Logic",
          "description": "Calculates z-scores based on input data and returns the results."
        },
        {
          "id": "APIException",
          "label": "API Exception Handler",
          "type": "Utility",
          "description": "Handles errors in the API by providing structured JSON error messages."
        }
      ],
      "edges": [
        {
          "source": "get_z_scores",
          "target": "APIException",
          "label": "USES"
        }
      ]
    }
  },
  "DataService.get_dataframe_from_sqlite": {
    "documentation": "```markdown\n# get_dataframe_from_sqlite\n\n## Description\nThe `get_dataframe_from_sqlite` method connects to a specified SQLite database and retrieves an entire table as a pandas DataFrame. This function is utilized by both the `ValidationService` and `StatsService` to facilitate data processing tasks.\n\n## Parameters\n- `db_path` (str): The file path to the SQLite database.\n- `table_name` (str): The name of the table to be retrieved from the database.\n\n## Returns\n- `pd.DataFrame`: A pandas DataFrame containing the data from the specified table. If the table is empty or does not exist, a `DataError` is raised.\n\n## Example Usage\n```python\ndata_service = DataService()\ndf = data_service.get_dataframe_from_sqlite('path/to/database.db', 'my_table')\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "DataService.get_dataframe_from_sqlite",
          "label": "Data Retrieval from SQLite",
          "type": "Business Logic",
          "description": "Connects to a SQLite database and retrieves a specified table as a pandas DataFrame."
        },
        {
          "id": "DataError",
          "label": "Data Processing Error",
          "type": "Utility",
          "description": "Custom exception raised for errors related to data processing."
        }
      ],
      "edges": [
        {
          "source": "DataService.get_dataframe_from_sqlite",
          "target": "DataError",
          "label": "RAISES"
        }
      ]
    }
  },
  "DataService.get_series_from_file": {
    "documentation": "```markdown\n## Description\nThe `get_series_from_file` method reads a CSV file, extracts a specified column, and returns it as a pandas Series. This method is useful for processing data files and retrieving specific data columns for further analysis.\n\n## Parameters\n- `file` (UploadFile): The CSV file to be read. It must be a valid CSV file.\n- `column_name` (str): The name of the column to extract from the CSV file.\n\n## Returns\n- pd.Series: A pandas Series containing the data from the specified column of the CSV file.\n\n## Raises\n- `DataError`: If the file type is not CSV, if the specified column does not exist in the file, or if there is an error during file processing.\n\n## Example Usage\n```python\nfrom fastapi import UploadFile\n\n# Assuming 'file' is an instance of UploadFile containing a CSV file\ndata_series = data_service.get_series_from_file(file, 'desired_column_name')\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "DataService.get_series_from_file",
          "label": "CSV Data Series Extractor",
          "type": "Business Logic",
          "description": "Reads a CSV file and extracts a specified column as a pandas Series for data analysis."
        },
        {
          "id": "DataError",
          "label": "Data Processing Error",
          "type": "Utility",
          "description": "Custom exception raised for errors related to data processing."
        }
      ],
      "edges": [
        {
          "source": "DataService.get_series_from_file",
          "target": "DataError",
          "label": "RAISES"
        }
      ]
    }
  },
  "DataService.get_series_from_sqlite": {
    "documentation": "```markdown\n## Description\nThe `get_series_from_sqlite` method retrieves a specific column from a SQLite table and returns it as a pandas Series. This method is useful for extracting data from a database for further analysis or processing.\n\n## Parameters\n- `db_path` (str): The file path to the SQLite database from which to read data.\n- `table_name` (str): The name of the table in the SQLite database that contains the desired column.\n- `column_name` (str): The name of the column to be extracted from the specified table.\n\n## Returns\n- `pd.Series`: A pandas Series containing the data from the specified column of the SQLite table.\n\n## Raises\n- `DataError`: If the specified `column_name` does not exist in the `table_name`, a `DataError` is raised with a message indicating the issue.\n\n## Example Usage\n```python\ndata_service = DataService()\nseries = data_service.get_series_from_sqlite('path/to/database.db', 'my_table', 'my_column')\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "DataService.get_series_from_sqlite",
          "label": "SQLite Data Retrieval",
          "type": "Business Logic",
          "description": "Retrieves a specific column from a SQLite table and returns it as a pandas Series."
        },
        {
          "id": "DataError",
          "label": "Data Processing Error",
          "type": "Utility",
          "description": "Custom exception raised for errors related to data processing."
        }
      ],
      "edges": [
        {
          "source": "DataService.get_series_from_sqlite",
          "target": "DataError",
          "label": "RAISES"
        }
      ]
    }
  },
  "ValidationService.validate_regression_inputs": {
    "documentation": "```markdown\n# validate_regression_inputs\n\n## Description\nThe `validate_regression_inputs` method connects to a database to validate that the specified columns for a regression analysis exist and are numeric. It serves as a critical component for ensuring data integrity before performing regression analysis by leveraging the `RegressionInput` model and the `DataService` for comprehensive validation.\n\n## Parameters\n- `payload` (RegressionInput): A Pydantic model containing the request data, which includes the database path, table name, dependent variable, and independent variables.\n\n## Returns\n- `bool`: Returns `True` if all validation checks pass successfully.\n\n## Raises\n- `DataError`: Raised if any validation check fails, providing specific details about the validation issue encountered.\n\n## Example Usage\n```python\nfrom app.models import RegressionInput\nfrom app.services import ValidationService\n\npayload = RegressionInput(\n    db_path='path/to/database.db',\n    table_name='my_table',\n    dependent_var='target_variable',\n    independent_vars=['feature1', 'feature2']\n)\n\nvalidation_service = ValidationService()\ntry:\n    validation_service.validate_regression_inputs(payload)\n    print(\"Validation successful.\")\nexcept DataError as e:\n    print(f\"Validation error: {e.detail}\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "ValidationService.validate_regression_inputs",
          "label": "Regression Input Validation Service",
          "type": "Business Logic",
          "description": "Validates the existence and numeric nature of regression analysis columns in a database."
        },
        {
          "id": "DataError",
          "label": "Data Error Exception",
          "type": "Utility",
          "description": "Custom exception raised for data processing errors during validation."
        },
        {
          "id": "RegressionInput",
          "label": "Regression Input Model",
          "type": "Data Model",
          "description": "Pydantic model that encapsulates the request data for regression validation."
        }
      ],
      "edges": [
        {
          "source": "ValidationService.validate_regression_inputs",
          "target": "DataError",
          "label": "RAISES"
        },
        {
          "source": "ValidationService.validate_regression_inputs",
          "target": "RegressionInput",
          "label": "USES"
        }
      ]
    }
  },
  "ValidationService.validate_correlation_inputs": {
    "documentation": "```markdown\n# validate_correlation_inputs\n\n## Description\nThe `validate_correlation_inputs` method validates the input for correlation analysis by ensuring that the specified columns exist in the provided data table and that they are numeric. This method is crucial for preventing errors during correlation calculations by enforcing the necessary conditions on the input data.\n\n## Parameters\n- `payload` (CorrelationInput): An instance of the Pydantic model that contains the necessary information for correlation analysis, including the database path, table name, and columns to check.\n\n## Raises\n- `DataError`: This exception is raised if the validation fails, indicating issues such as the absence of required columns or non-numeric data types.\n\n## Returns\n- `bool`: Returns `True` if the validation is successful.\n\n## Example Usage\n```python\ntry:\n    validation_service.validate_correlation_inputs(correlation_input)\nexcept DataError as e:\n    print(f\"Validation error: {e.detail}\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "ValidationService.validate_correlation_inputs",
          "label": "Correlation Input Validation Logic",
          "type": "Business Logic",
          "description": "Validates the input for correlation analysis by checking the existence and numeric type of specified columns."
        },
        {
          "id": "DataError",
          "label": "Data Processing Error",
          "type": "Utility",
          "description": "Custom exception raised for errors related to data processing."
        }
      ],
      "edges": [
        {
          "source": "ValidationService.validate_correlation_inputs",
          "target": "DataError",
          "label": "RAISES"
        }
      ]
    }
  },
  "DataService": {
    "documentation": "```markdown\n# DataService\n\n## Description\nThe `DataService` class provides methods for loading data into pandas objects from various sources, including CSV files and SQLite databases. It facilitates data retrieval and processing tasks, making it easier to work with data in a structured format.\n\n## Parameters/Attributes\nNone\n\n## Methods\n### get_dataframe_from_sqlite(db_path: str, table_name: str) -> pd.DataFrame\n- **db_path** (str): The file path to the SQLite database.\n- **table_name** (str): The name of the table to be retrieved from the database.\n\n### get_series_from_file(file: UploadFile, column_name: str) -> pd.Series\n- **file** (UploadFile): The CSV file to be read. It must be a valid CSV file.\n- **column_name** (str): The name of the column to extract from the CSV file.\n\n### get_series_from_sqlite(db_path: str, table_name: str, column_name: str) -> pd.Series\n- **db_path** (str): The file path to the SQLite database from which to read data.\n- **table_name** (str): The name of the table in the SQLite database that contains the desired column.\n- **column_name** (str): The name of the column to be extracted from the specified table.\n\n## Returns\n- `get_dataframe_from_sqlite`: Returns a `pd.DataFrame` containing the data from the specified table. Raises a `DataError` if the table is empty or does not exist.\n- `get_series_from_file`: Returns a `pd.Series` containing the data from the specified column of the CSV file. Raises a `DataError` for invalid file types or missing columns.\n- `get_series_from_sqlite`: Returns a `pd.Series` containing the data from the specified column of the SQLite table. Raises a `DataError` if the column does not exist.\n\n## Example Usage\n```python\ndata_service = DataService()\n\n# Load a DataFrame from a SQLite database\ndf = data_service.get_dataframe_from_sqlite('path/to/database.db', 'my_table')\n\n# Extract a Series from a CSV file\nfrom fastapi import UploadFile\ndata_series = data_service.get_series_from_file(file, 'desired_column_name')\n\n# Extract a Series from a SQLite table\nseries = data_service.get_series_from_sqlite('path/to/database.db', 'my_table', 'my_column')\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "DataService",
          "label": "Data Service for Data Loading",
          "type": "Business Logic",
          "description": "Facilitates loading data into pandas objects from various sources like CSV files and SQLite databases."
        },
        {
          "id": "get_dataframe_from_sqlite",
          "label": "Retrieve DataFrame from SQLite",
          "type": "Business Logic",
          "description": "Connects to a SQLite database and retrieves an entire table as a pandas DataFrame."
        },
        {
          "id": "get_series_from_file",
          "label": "Extract Series from CSV File",
          "type": "Business Logic",
          "description": "Reads a CSV file and extracts a specified column as a pandas Series."
        },
        {
          "id": "get_series_from_sqlite",
          "label": "Retrieve Series from SQLite",
          "type": "Business Logic",
          "description": "Retrieves a specific column from a SQLite table and returns it as a pandas Series."
        }
      ],
      "edges": [
        {
          "source": "DataService",
          "target": "get_dataframe_from_sqlite",
          "label": "USES"
        },
        {
          "source": "DataService",
          "target": "get_series_from_file",
          "label": "USES"
        },
        {
          "source": "DataService",
          "target": "get_series_from_sqlite",
          "label": "USES"
        }
      ]
    }
  },
  "ValidationService": {
    "documentation": "```markdown\n# ValidationService\n\n## Description\nThe `ValidationService` class is dedicated to performing complex, cross-service validations that extend beyond simple model field checks. It connects models to the data layer, ensuring that requests are not only well-formed but also logically valid against the actual data. This service is essential for maintaining data integrity across various analytical processes.\n\n## Parameters/Attributes\n- `data_svc` (DataService, optional): An instance of `DataService` used for validation operations. Defaults to a predefined `data_service`.\n\n## Returns\nNone\n\n## Example Usage\n```python\nfrom app.models import RegressionInput\nfrom app.services import ValidationService\n\ndata_service_instance = DataService()\nvalidation_service = ValidationService(data_svc=data_service_instance)\n\npayload = RegressionInput(\n    db_path='path/to/database.db',\n    table_name='my_table',\n    dependent_var='target_variable',\n    independent_vars=['feature1', 'feature2']\n)\n\ntry:\n    validation_service.validate_regression_inputs(payload)\n    print(\"Validation successful.\")\nexcept DataError as e:\n    print(f\"Validation error: {e.detail}\")\n```\n```",
    "conceptual_data": {
      "nodes": [
        {
          "id": "ValidationService",
          "label": "Validation Service",
          "type": "Business Logic",
          "description": "Performs complex, cross-service validations to ensure data integrity before analysis."
        },
        {
          "id": "DataService",
          "label": "Data Service",
          "type": "Utility",
          "description": "Provides data access and manipulation functionalities for validation operations."
        },
        {
          "id": "RegressionInput",
          "label": "Regression Input Model",
          "type": "Data Model",
          "description": "Defines the structure of input data required for regression analysis."
        },
        {
          "id": "CorrelationInput",
          "label": "Correlation Input Model",
          "type": "Data Model",
          "description": "Defines the structure of input data required for correlation analysis."
        },
        {
          "id": "DataError",
          "label": "Data Error",
          "type": "Business Logic",
          "description": "Exception raised when validation checks fail, providing details about the error."
        }
      ],
      "edges": [
        {
          "source": "ValidationService",
          "target": "DataService",
          "label": "USES"
        },
        {
          "source": "ValidationService",
          "target": "RegressionInput",
          "label": "VALIDATES"
        },
        {
          "source": "ValidationService",
          "target": "CorrelationInput",
          "label": "VALIDATES"
        },
        {
          "source": "ValidationService",
          "target": "DataError",
          "label": "RAISES"
        }
      ]
    }
  }
}